{"meta":{"title":"lessroc的博客","subtitle":"生命不息·折腾不止","description":"狂热的初学者","author":"lessroc","url":"http://yoursite.com","root":"/"},"pages":[{"title":"404","date":"2019-11-03T09:35:48.000Z","updated":"2019-11-03T09:52:15.403Z","comments":true,"path":"404/index.html","permalink":"http://yoursite.com/404/index.html","excerpt":"","text":"404"}],"posts":[{"title":"Sass 运算","slug":"Sass 运算","date":"2020-07-10T10:11:48.000Z","updated":"2020-07-14T11:05:01.690Z","comments":true,"path":"2020/07/10/Sass 运算/","link":"","permalink":"http://yoursite.com/2020/07/10/Sass%20%E8%BF%90%E7%AE%97/","excerpt":"程序中的运算是常见的一件事情 但在 CSS 中能做运算的，到目前为止仅有 calc() 函数可行 但在 Sass 中，运算只是其基本特性之一，在 Sass 中可以做各种数学计算","text":"程序中的运算是常见的一件事情 但在 CSS 中能做运算的，到目前为止仅有 calc() 函数可行 但在 Sass 中，运算只是其基本特性之一，在 Sass 中可以做各种数学计算 以下代码块中均采用 SCSS 语法格式 加法运算加法运算是 Sass 中运算中的一种，在变量或属性中都可以做加法运算。如： 123.box &#123; width: 20px + 8in;&#125; 编译出来的 CSS: 123.box &#123; width: 788px;&#125; 但对于携带不同类型的单位时，在 Sass 中计算会报错，如下例所示： 123.box &#123; width: 20px + 1em;&#125; 编译的时候，编译器会报错：Incompatible units: &#39;em&#39; and &#39;px&#39; 减法运算Sass 的减法运算和加法运算类似，如： 123456$full-width: 960px;$sidebar-width: 200px;.content &#123; width: $full-width - $sidebar-width;&#125; 编译出来的 CSS 如下： 123.content &#123; width: 760px;&#125; 同样的，运算时碰到不同类型的单位时，编译也会报错，如： 12345$full-width: 960px;.content &#123; width: $full-width - 1em;&#125; 编译的时候，编译器会报错：Incompatible units: &#39;em&#39; and &#39;px&#39; 乘法运算Sass 中的乘法运算和前面介绍的加法与减法运算还略有不同 虽然他也能够支持多种单位（比如 em, px, %），但当一个单位同时声明两个值时会有问题 比如下面的示例： 123.box &#123; width:10px * 2px; &#125; 编译的时候报 20px * px isn&#39;t a valid CSS value 错误信息 如果进行乘法运算时，两个值单位相同时，只需要为一个数值提供单位即可 上面的示例可以修改成： 123.box &#123; width: 10px * 2;&#125; 编译出来的 CSS: 123.box &#123; width: 20px;&#125; Sass 的乘法运算和加法、减法运算一样， 在运算中有不同类型的单位时，也将会报错。如下面的示例： 123.box &#123; width: 20px * 2em;&#125; 编译时报 40em * px isn&#39;t a valid CSS value 错误信息。 除法运算Sass 的乘法运算规则也适用于除法运算，不过除法运算还有一个特殊之处 众所周知 / 符号在 CSS 中已做为一种符号使用 因此在 Sass 中做除法运算时，直接使用 / 符号做为除号时，将不会生效 编译时既得不到我们需要的效果，也不会报错。一起先来看一个简单的示例： 123.box &#123; width: 100px / 2; &#125; 编译出来的 CSS 如下： 123.box &#123; width: 100px / 2;&#125; 这样的结果对于大家来说没有任何意义 要修正这个问题，只需要给运算的外面添加一个小括号( )即可： 123.box &#123; width: (100px / 2); &#125; 编译出来的 CSS 如下： 123.box &#123; width: 50px;&#125; 除了上面情况带有小括号，“/”符号会当作除法运算符之外，如果“/”符号在已有的数学表达式中时，也会被认作除法符号。如下面示例： 123.box &#123; width: 100px / 2 + 2in; &#125; 编译出来的 CSS： 123.box &#123; width: 242px;&#125; 另外，在 Sass 除法运算中，当用变量进行除法运算时， / 符号也会自动被识别成除法， 如下例所示： 12345678910$width: 1000px;$nums: 10;.item &#123; width: $width / 10; &#125;.list &#123; width: $width / $nums;&#125; 编译出来的 CSS: 1234567.item &#123; width: 100px;&#125;.list &#123; width: 100px;&#125; 综合上述， / 符号被当作除法运算符时有以下几种情况： 如果数值或它的任意部分是存储在一个变量中或是函数的返回值 如果数值被圆括号包围 如果数值是另一个数学表达式的一部分。 如下所示： 123456789// SCSSp &#123; font: 10px / 8px; // 纯 CSS，不是除法运算 $width: 1000px; width: $width / 2; // 使用了变量，是除法运算 width: round(1.5) / 2; // 使用了函数，是除法运算 height: (500px/2); // 使用了圆括号，是除法运算 margin-left: 5px + 8px / 2px; // 使用了加(+)号，是除法运算&#125; 编译出来的 CSS 123456p &#123; font: 10px / 8px; width: 500px; height: 250px; margin-left: 9px; &#125; Sass 的除法运算还有一个情况 我们先回忆一下，在乘法运算时，如果两个值带有相同单位时，做乘法运算时， 出来的结果并不是我们需要的结果。但在除法运算时，如果两个值带有相同的单位值时， 除法运算之后会得到一个不带单位的数值。如下所示： 123.box &#123; width: (100px / 10px);&#125; 编译出来的 CSS 如下： 123.box &#123; width: 10;&#125; 变量计算在 Sass 中除了可以使用数值进行运算之外 还可以使用变量进行计算，其实在前面章节的示例中也或多或少的向大家展示了 在 Sass 中使用变量进行计算，这使得 Sass 的数学运算功能变得更加实用 一起来看一个简单的示例： 12345678$content-width: 720px;$sidebar-width: 220px;$gutter: 20px;.container &#123; width: $content-width + $sidebar-width + $gutter; margin: 0 auto;&#125; 编译出来的 CSS 1234.container &#123; width: 960px; margin: 0 auto;&#125; 数字运算在 Sass 运算中数字运算是较为常见的 数字运算包括前面介绍的：加法、减法、乘法和除法等运算 而且还可以通过括号来修改他们的运算先后顺序 和我们数学运算是一样的，一起来看个示例: 123.box &#123; width: ((220px + 720px) - 11 * 20 ) / 12; &#125; 编译出来的 CSS： 123.box &#123; width: 60px;&#125; 上面这个简单示例是一个典型的计算 Grid 单列列宽的运算。 颜色运算所有算数运算都支持颜色值，并且是分段运算的。也就是说，红、绿和蓝各颜色分段单独进行运算。如： 123p &#123; color: #010203 + #040506;&#125; 计算公式为 01 + 04 = 05、02 + 05 = 07 和 03 + 06 = 09， 并且被合成为： 如此编译出来的 CSS 为： 123p &#123; color: #050709;&#125; 算数运算也能将数字和颜色值 一起运算，同样也是分段运算的。如： 123p &#123; color: #010203 * 2;&#125; 计算公式为 01 * 2 = 02、02 * 2 = 04 和 03 * 2 = 06， 并且被合成为： 123p &#123; color: #020406;&#125; 字符运算在 Sass 中可以通过加法符号 + 来对字符串进行连接。例如： 1234$content: \"Hello\" + \"\" + \"Sass!\";.box:before &#123; content: \" #&#123;$content&#125; \";&#125; 编译出来的 CSS： 123.box:before &#123; content: \" Hello Sass! \";&#125; 除了在变量中做字符连接运算之外，还可以直接通过 +，把字符连接在一起： 123div &#123; cursor: e + -resize;&#125; 编译出来的 CSS: 123div &#123; cursor: e-resize;&#125; 注意: 如果有引号的字符串被添加了一个没有引号的字符串 (有带引号的字符串在 + 符号左侧)，结果会是一个有引号的字符串 同样的，如果一个没有引号的字符串被添加了一个有引号的字符串 (没带引号的字符串在 + 符号左侧)，结果将是一个没有引号的字符串 例如： 1234p:before &#123; content: \"Foo \" + Bar; font-family: sans- + \"serif\";&#125; 编译出来的 CSS： 123p:before &#123; content: \"Foo Bar\"; font-family: sans-serif; &#125;","categories":[],"tags":[{"name":"Sass","slug":"Sass","permalink":"http://yoursite.com/tags/Sass/"}]},{"title":"Sass 数据类型","slug":"Sass 数据类型","date":"2020-07-10T09:06:03.000Z","updated":"2020-07-14T16:35:13.158Z","comments":true,"path":"2020/07/10/Sass 数据类型/","link":"","permalink":"http://yoursite.com/2020/07/10/Sass%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","excerpt":"","text":"Sass 和 JavaScript 语言类似，也具有自己的数据类型 在 Sass 中包含以下几种数据类型： 数字：如，1、2、13、10px 字符串：有引号字符串或无引号字符串，如，&quot;foo&quot;、&#39;bar&#39;、baz 颜色：如，blue、#04a3f9、rgba(255,0,0,0.5) 布尔型：如，true、false 空值：如，null 值列表：用空格或者逗号分开，如，1.5em 1em 0 2em、Helvetica, Arial, sans-serif SassScript 也支持其他 CSS 属性值（property value） 比如 Unicode 范围，或 !important 声明 然而，Sass 不会特殊对待这些属性值一律视为无引号字符串 (unquoted strings)","categories":[],"tags":[{"name":"Sass","slug":"Sass","permalink":"http://yoursite.com/tags/Sass/"}]},{"title":"Sass 插值","slug":"Sass 插值","date":"2020-07-10T08:25:12.000Z","updated":"2020-07-14T11:03:33.929Z","comments":true,"path":"2020/07/10/Sass 插值/","link":"","permalink":"http://yoursite.com/2020/07/10/Sass%20%E6%8F%92%E5%80%BC/","excerpt":"使用 CSS 预处理器语言的一个主要原因是想使用 Sass 获得一个更好的结构体系 比如说你想写更干净的、高效的和面向对象的 CSS Sass 中的插值(Interpolation)就是重要的一部分","text":"使用 CSS 预处理器语言的一个主要原因是想使用 Sass 获得一个更好的结构体系 比如说你想写更干净的、高效的和面向对象的 CSS Sass 中的插值(Interpolation)就是重要的一部分 让我们看一下下面的例子： 123456789$properties: (margin, padding);@mixin set-value($side, $value) &#123; @each $prop in $properties &#123; #&#123;$prop&#125;-#&#123;$side&#125;: $value; &#125;&#125;.login-box &#123; @include set-value(top, 14px);&#125; 它可以让变量和属性工作的很完美，上面的代码编译成 CSS： 1234.login-box &#123; margin-top: 14px; padding-top: 14px;&#125; 这是 Sass 插值中一个简单的实例 当你想设置属性值的时候你可以使用字符串插入进来 另一个有用的用法是构建一个选择器，可以这样使用： 123456@mixin generate-sizes($class, $small, $medium, $big) &#123; .#&#123;$class&#125;-small &#123; font-size: $small; &#125; .#&#123;$class&#125;-medium &#123; font-size: $medium; &#125; .#&#123;$class&#125;-big &#123; font-size: $big; &#125;&#125;@include generate-sizes(\"header-text\", 12px, 20px, 40px); 编译出来的 CSS: 123.header-text-small &#123; font-size: 12px; &#125;.header-text-medium &#123; font-size: 20px; &#125;.header-text-big &#123; font-size: 40px; &#125; 一旦你发现这一点，你就会想到 mixins 用来生成代码或者生成另一个 mixins 然而，这并不完全是可能的 第一个限制，这可能会很删除用于 Sass 变量的插值 123456789$margin-big: 40px;$margin-medium: 20px;$margin-small: 12px;@mixin set-value($size) &#123; margin-top: $margin-#&#123;$size&#125;;&#125;.login-box &#123; @include set-value(big);&#125; 上面的 Sass 代码编译出来，你会得到下面的信息： error style.scss (Line 5: Undefined variable: &quot;$margin-&quot;.) 所以，#{}语法并不是随处可用，你也不能在 mixin 中调用： 12345678@mixin updated-status &#123; margin-top: 20px; background: #F00;&#125;$flag: \"status\";.navigation &#123; @include updated-#&#123;$flag&#125;;&#125; 上面的代码在编译成 CSS 时同样会报错： error style.scss (Line 7: Invalid CSS after &quot;...nclude updated-&quot;: expected &quot;}&quot;, was &quot;#{$flag};&quot;) 幸运的是，可以使用 @extend 中使用插值，例如： 123456789101112%updated-status &#123; margin-top: 20px; background: #F00;&#125;.selected-status &#123; font-weight: bold;&#125;$flag: \"status\";.navigation &#123; @extend %updated-#&#123;$flag&#125;; @extend .selected-#&#123;$flag&#125;;&#125; 上面的 Sass 代码是可以运行的 因为他给了我们力量，可以动态的插入 .class 和 %placeholder 当然他们不能接受像 mixin 这样的参数，上面的代码编译出来的 CSS: 1234567.navigation &#123; margin-top: 20px; background: #F00;&#125;.selected-status, .navigation &#123; font-weight: bold;&#125;","categories":[],"tags":[{"name":"Sass","slug":"Sass","permalink":"http://yoursite.com/tags/Sass/"}]},{"title":"Sass 混合宏 VS 继承 VS 占位符","slug":"Sass 混合宏 VS 继承 VS 占位符","date":"2020-07-10T07:48:32.000Z","updated":"2020-07-14T10:42:49.185Z","comments":true,"path":"2020/07/10/Sass 混合宏 VS 继承 VS 占位符/","link":"","permalink":"http://yoursite.com/2020/07/10/Sass%20%E6%B7%B7%E5%90%88%E5%AE%8F%20VS%20%E7%BB%A7%E6%89%BF%20VS%20%E5%8D%A0%E4%BD%8D%E7%AC%A6/","excerpt":"初学者都常常纠结于这个问题 什么时候用混合宏，什么时候用继承，什么时候使用占位符？ 其实他们各有各的优点与缺点，先来看看他们使用效果：","text":"初学者都常常纠结于这个问题 什么时候用混合宏，什么时候用继承，什么时候使用占位符？ 其实他们各有各的优点与缺点，先来看看他们使用效果： Sass 中混合宏的使用12345678910111213141516171819202122@mixin mt($var)&#123; margin-top: $var;&#125;.block &#123; @include mt(5px); span &#123; display:block; @include mt(5px); &#125;&#125;.header &#123; color: orange; @include mt(5px); span&#123; display:block; @include mt(5px); &#125;&#125; 编译出来的 CSS: 12345678910111213141516.block &#123; margin-top: 5px;&#125;.block span &#123; display: block; margin-top: 5px;&#125;.header &#123; color: orange; margin-top: 5px;&#125;.header span &#123; display: block; margin-top: 5px;&#125; 总结：编译出来的 CSS 清晰告诉了大家 他不会自动合并相同的样式代码，如果在样式文件中调用同一个混合宏 会产生多个对应的样式代码，造成代码的冗余，这也是 CSS 无法忍受的一件事情 不过他并不是一无事处，他可以传参数 个人建议：如果你的代码块中涉及到变量，建议使用混合宏来创建相同的代码块 Sass 中继承的使用同样的，将上面代码中的混合宏，使用类名来表示，然后通过继承来调用： 12345678910111213141516171819202122.mt&#123; margin-top: 5px; &#125;.block &#123; @extend .mt; span &#123; display:block; @extend .mt; &#125;&#125;.header &#123; color: orange; @extend .mt; span&#123; display:block; @extend .mt; &#125;&#125; 编译出来的 CSS: 1234567891011121314.mt, .block, .block span, .header, .header span &#123; margin-top: 5px;&#125;.block span &#123; display: block;&#125;.header &#123; color: orange;&#125;.header span &#123; display: block;&#125; 总结：使用继承后，编译出来的 CSS 会将使用继承的代码块合并到一起 通过组合选择器的方式向大家展现 比如 .mt, .block, .block span, .header, .header span 这样编译出来的代码相对于混合宏来说要干净的多，也是 CSS 期望看到 但是他不能传变量参数 个人建议：如果你的代码块不需要传任何变量参数，而且有一个基类已在文件中存在那么建议使用 Sass 的继承 Sass 中占位符的使用最后来看占位符，将上面代码中的基类 .mt 换成 Sass 的占位符格式： 12345678910111213141516171819202122%mt&#123; margin-top: 5px; &#125;.block &#123; @extend %mt; span &#123; display:block; @extend %mt; &#125;&#125;.header &#123; color: orange; @extend %mt; span&#123; display:block; @extend %mt; &#125;&#125; 编译出来的 CSS: 1234567891011121314.block, .block span, .header, .header span &#123; margin-top: 5px;&#125;.block span &#123; display: block;&#125;.header &#123; color: orange;&#125;.header span display: block;&#125; 总结：编译出来的 CSS 代码和使用继承基本上是相同 只是不会在代码中生成占位符 mt 的选择器，那么占位符和继承的主要区别是： 占位符是独立定义，不调用的时候是不会在 CSS 中产生任何代码 继承是首先有一个基类存在，不管调用与不调用，基类的样式都将会出现在编译出来的 CSS 代码中 来看一个表格：","categories":[],"tags":[{"name":"Sass","slug":"Sass","permalink":"http://yoursite.com/tags/Sass/"}]},{"title":"Sass 占位符 %(placeholder)","slug":"Sass 占位符","date":"2020-07-10T07:35:21.000Z","updated":"2020-07-14T10:59:09.103Z","comments":true,"path":"2020/07/10/Sass 占位符/","link":"","permalink":"http://yoursite.com/2020/07/10/Sass%20%E5%8D%A0%E4%BD%8D%E7%AC%A6/","excerpt":"","text":"Sass 中的占位符 %placeholder 是一个很强大，很实用的功能 他可以取代以前 CSS 中的基类造成的代码冗余的情形 因为 %placeholder 声明的代码，如果不被 @extend 调用的话，不会产生任何代码 来看一个演示： 123456%mt5 &#123; margin-top: 5px;&#125;%pt5&#123; padding-top: 5px;&#125; 这段代码没有被 @extend 调用，他并没有产生任何代码块 只是静静的躺在你的某个 SCSS 文件中，只有通过 @extend 调用才会产生代码： 12345678910111213141516171819%mt5 &#123; margin-top: 5px;&#125;%pt5&#123; padding-top: 5px;&#125;.btn &#123; @extend %mt5; @extend %pt5;&#125;.block &#123; @extend %mt5; span &#123; @extend %pt5; &#125;&#125; 编译出来的 CSS： 1234567.btn, .block &#123; margin-top: 5px;&#125;.btn, .block span &#123; padding-top: 5px;&#125; 从编译出来的 CSS 代码可以看出 通过 @extend 调用的占位符 编译出来的代码会将相同的代码合并在一起 这也是我们希望看到的效果，也让你的代码变得更为干净","categories":[],"tags":[{"name":"Sass","slug":"Sass","permalink":"http://yoursite.com/tags/Sass/"}]},{"title":"Sass 扩展/继承","slug":"Sass 扩展继承","date":"2020-07-10T06:23:49.000Z","updated":"2020-07-14T10:59:22.086Z","comments":true,"path":"2020/07/10/Sass 扩展继承/","link":"","permalink":"http://yoursite.com/2020/07/10/Sass%20%E6%89%A9%E5%B1%95%E7%BB%A7%E6%89%BF/","excerpt":"在 Sass 中也具有继承一说，也是继承类中的样式代码块 在 Sass 中是通过关键词 @extend 来继承已存在的类样式块，从而实现代码的继承","text":"在 Sass 中也具有继承一说，也是继承类中的样式代码块 在 Sass 中是通过关键词 @extend 来继承已存在的类样式块，从而实现代码的继承 如下所示： 1234567891011121314151617.btn &#123; border: 1px solid #ccc; padding: 6px 10px; font-size: 14px;&#125;.btn-primary &#123; background-color: #f36; color: #fff; @extend .btn;&#125;.btn-second &#123; background-color: orange; color: #fff; @extend .btn;&#125; 编译出来之后 CSS： 123456789101112131415.btn, .btn-primary, .btn-second &#123; border: 1px solid #ccc; padding: 6px 10px; font-size: 14px;&#125;.btn-primary &#123; background-color: #f36; color: #fff;&#125;.btn-second &#123; background-clor: orange; color: #fff;&#125; 从示例代码可以看出，在 Sass 中的继承 可以继承类样式块中所有样式代码 而且编译出来的 CSS 会将选择器合并在一起 形成组合选择器： 12345.btn, .btn-primary, .btn-second &#123; border: 1px solid #ccc; padding: 6px 10px; font-size: 14px;&#125;","categories":[],"tags":[{"name":"Sass","slug":"Sass","permalink":"http://yoursite.com/tags/Sass/"}]},{"title":"Sass 混合宏","slug":"Sass 混合宏","date":"2020-07-10T03:23:43.000Z","updated":"2020-07-14T08:34:31.957Z","comments":true,"path":"2020/07/10/Sass 混合宏/","link":"","permalink":"http://yoursite.com/2020/07/10/Sass%20%E6%B7%B7%E5%90%88%E5%AE%8F/","excerpt":"如果整个网站中有几处小样式类似 比如颜色，字体等，在 Sass 可以使用变量来统一处理 那么这种选择还是不错的。但当你的样式变得越来越复杂 需要重复使用大段的样式时，使用变量就无法达到我们目了 这个时候 Sass 中的混合宏就会变得非常有意义","text":"如果整个网站中有几处小样式类似 比如颜色，字体等，在 Sass 可以使用变量来统一处理 那么这种选择还是不错的。但当你的样式变得越来越复杂 需要重复使用大段的样式时，使用变量就无法达到我们目了 这个时候 Sass 中的混合宏就会变得非常有意义 声明混合宏不带参数混合宏在 Sass 中，使用 @mixin 来声明一个混合宏，如： 1234@mixin border-radius&#123; -webkit-border-radius: 5px; border-radius: 5px;&#125; 其中 @mixin 是用来声明混合宏的关键词 有点类似 CSS 中的 @media、@font-face 一样 border-radius 是混合宏的名称。大括号里面是复用的样式代码 带参数混合宏除了声明一个不带参数的混合宏之外，还可以在定义混合宏时带有参数，如： 1234@mixin border-radius($radius:5px)&#123; -webkit-border-radius: $radius; border-radius: $radius;&#125; 复杂的混合宏上面是一个简单的定义混合宏的方法 当然，Sass 中的混合宏还提供更为复杂的 你可以在大括号里面写上带有逻辑关系，帮助更好的做你想做的事情，如： 12345678@mixin box-shadow($shadow...) &#123; @if length($shadow) &gt;= 1 &#123; @include prefixer(box-shadow, $shadow); &#125; @else&#123; $shadow:0 0 4px rgba(0, 0, 0, .3); @include prefixer(box-shadow, $shadow); &#125;&#125; 这个 box-shadow 的混合宏，带有多个参数，这个时候可以使用 ... 来替代 简单的解释一下，当 $shadow 的参数数量值大于或等于 1 时，表示有多个阴影值 反之调用默认的参数值 0 0 4px rgba(0,0,0,.3) 注：复杂的混合宏中的逻辑关系（@if…@else）后面小节会有讲解 调用混合宏在 Sass 中通过 @mixin 关键词声明了一个混合宏 那么在实际调用中，其匹配了一个关键词 @include 来调用声明好的混合宏 例如在你的样式中定义了一个圆角的混合宏 border-radius: 1234@mixin border-radius&#123; -webkit-border-radius: 3px; border-radius: 3px;&#125; 在一个按钮中要调用定义好的混合宏 border-radius，可以这样使用： 123button &#123; @include border-radius;&#125; 这个时候编译出来的 CSS: 1234button &#123; -webkit-border-radius: 3px; border-radius: 3px;&#125; 混合宏的参数Sass 的混合宏有一个强大的功能，可以传参，那么在 Sass 中传参主要有以下几种情形： 传一个不带值的参数在混合宏中，可以传一个不带任何值的参数，比如： 1234@mixin border-radius($radius)&#123; -webkit-border-radius: $radius; border-radius: $radius;&#125; 在混合宏 border-radius 中定义了一个不带任何值的参数 $radius 在调用的时候可以给这个混合宏传一个参数值： 123.box &#123; @include border-radius(3px);&#125; 这里表示给混合宏传递了一个 border-radius 的值为 3px 编译出来的 CSS: 1234.box &#123; -webkit-border-radius: 3px; border-radius: 3px;&#125; 传一个带值的参数在 Sass 的混合宏中，还可以给混合宏的参数传一个默认值，例如： 1234@mixin border-radius($radius: 3px)&#123; -webkit-border-radius: $radius; border-radius: $radius;&#125; 在混合宏 border-radius 传了一个参数 $radius 而且给这个参数赋予了一个默认值 3px 在调用类似这样的混合宏时，会多有一个机会 假设你的页面中的圆角很多地方都是 3px 的圆角 那么这个时候只需要调用默认的混合宏 border-radius: 123.btn &#123; @include border-radius;&#125; 编译出来的 CSS: 1234.btn &#123; -webkit-border-radius: 3px; border-radius: 3px;&#125; 但有的时候，页面中有些元素的圆角值不一样，那么可以随机给混合宏传值，如： 123.box &#123; @include border-radius(50%);&#125; 编译出来的 CSS: 1234.box &#123; -webkit-border-radius: 50%; border-radius: 50%;&#125; 传多个参数Sass 混合宏除了能传一个参数之外，还可以传多个参数，如： 123456789@mixin center($width,$height)&#123; width: $width; height: $height; position: absolute; top: 50%; left: 50%; margin-top: -($height) / 2; margin-left: -($width) / 2;&#125; 在混合宏 center 就传了多个参数。在实际调用和其调用其他混合宏是一样的： 123.box-center &#123; @include center(500px,300px);&#125; 编译出来 CSS: 123456789.box-center &#123; width: 500px; height: 300px; position: absolute; top: 50%; left: 50%; margin-top: -150px; margin-left: -250px;&#125; 有一个特别的参数 ... 当混合宏传的参数过多之时， 可以使用参数来替代，如： 12345678910@mixin box-shadow($shadows...)&#123; @if length($shadows) &gt;= 1 &#123; -webkit-box-shadow: $shadows; box-shadow: $shadows; &#125; @else &#123; $shadows: 0 0 2px rgba(#000, .25); -webkit-box-shadow: $shadow; box-shadow: $shadow; &#125;&#125; 在实际调用中： 123.box &#123; @include box-shadow(0 0 1px rgba(#000, .5),0 0 2px rgba(#000, .2));&#125; 编译出来的 CSS: 1234.box &#123; -webkit-box-shadow: 0 0 1px rgba(0, 0, 0, 0.5), 0 0 2px rgba(0, 0, 0, 0.2); box-shadow: 0 0 1px rgba(0, 0, 0, 0.5), 0 0 2px rgba(0, 0, 0, 0.2);&#125; 混合宏的不足混合宏在实际编码中给我们带来很多方便之处 特别是对于复用重复代码块 但其最大的不足之处是会生成冗余的代码块 比如在不同的地方调用一个相同的混合宏时，如： 12345678910111213@mixin border-radius&#123; -webkit-border-radius: 3px; border-radius: 3px;&#125;.box &#123; @include border-radius; margin-bottom: 5px;&#125;.btn &#123; @include border-radius;&#125; 示例在 .box 和 .btn 中都调用了定义好的 border-radius 混合宏 先来看编译出来的 CSS： 12345678910.box &#123; -webkit-border-radius: 3px; border-radius: 3px; margin-bottom: 5px;&#125;.btn &#123; -webkit-border-radius: 3px; border-radius: 3px;&#125; 上例明显可以看出 Sass 在调用相同的混合宏时 并不能智能的将相同的样式代码块合并在一起 这也是 Sass 的混合宏最不足之处","categories":[],"tags":[{"name":"Sass","slug":"Sass","permalink":"http://yoursite.com/tags/Sass/"}]},{"title":"Sass 嵌套","slug":"Sass 嵌套","date":"2020-07-10T02:37:05.000Z","updated":"2020-07-14T08:34:27.166Z","comments":true,"path":"2020/07/10/Sass 嵌套/","link":"","permalink":"http://yoursite.com/2020/07/10/Sass%20%E5%B5%8C%E5%A5%97/","excerpt":"Sass 中还提供了选择器嵌套功能 但这也并不意味着你在 Sass 中的嵌套是无节制的 因为你嵌套的层级越深，编译出来的 CSS 代码的选择器层级将越深 这往往是大家不愿意看到的一点。这个特性现在正被众多开发者滥用 选择器嵌套为样式表的作者提供了一个通过局部选择器相互嵌套实现全局选择的方法","text":"Sass 中还提供了选择器嵌套功能 但这也并不意味着你在 Sass 中的嵌套是无节制的 因为你嵌套的层级越深，编译出来的 CSS 代码的选择器层级将越深 这往往是大家不愿意看到的一点。这个特性现在正被众多开发者滥用 选择器嵌套为样式表的作者提供了一个通过局部选择器相互嵌套实现全局选择的方法 Sass 的嵌套分为三种： 选择器嵌套 属性嵌套 伪类嵌套 选择器嵌套假设我们有一段这样的结构： 1234567&lt;header&gt;&lt;nav&gt; &lt;a href=“##”&gt;Home&lt;/a&gt; &lt;a href=“##”&gt;About&lt;/a&gt; &lt;a href=“##”&gt;Blog&lt;/a&gt;&lt;/nav&gt;&lt;header&gt; 想选中 header 中的 a 标签，在写 CSS 会这样写： 1234567nav a &#123; color:red;&#125;header nav a &#123; color:green;&#125; 那么在 Sass 中，就可以使用选择器的嵌套来实现： 123456789nav &#123; a &#123; color: red; header &amp; &#123; color:green; &#125; &#125; &#125; 属性嵌套Sass 中还提供属性嵌套，CSS 有一些属性前缀相同，只是后缀不一样 比如：border-top / border-right，与这个类似的还有 margin、padding、font 等属性 假设你的样式中用到了： 1234.box &#123; border-top: 1px solid red; border-bottom: 1px solid green;&#125; 在 Sass 中我们可以这样写： 123456.box &#123; border: &#123; top: 1px solid red; bottom: 1px solid green; &#125;&#125; 伪类嵌套其实伪类嵌套和属性嵌套非常类似，只不过他需要借助 &amp; 符号一起配合使用 就拿经典的 clearfix 为例吧： 1234567891011.clearfix&#123; &amp;:before, &amp;:after &#123; content:\"\"; display: table; &#125; &amp;:after &#123; clear:both; overflow: hidden; &#125;&#125; 编译出来的 CSS： 12345678clearfix:before, .clearfix:after &#123; content: \"\"; display: table;&#125;.clearfix:after &#123; clear: both; overflow: hidden;&#125; 避免选择器嵌套：选择器嵌套最大的问题是将使最终的代码难以阅读 开发者需要花费巨大精力计算不同缩进级别下的选择器具体的表现效果 选择器越具体则声明语句越冗长，而且对最近选择器的引用 &amp; 也越频繁 在某些时候，出现混淆选择器路径和探索下一级选择器的错误率很高，这非常不值得 为了防止此类情况，我们应该尽可能避免选择器嵌套。然而，显然只有少数情况适应这一措施","categories":[],"tags":[{"name":"Sass","slug":"Sass","permalink":"http://yoursite.com/tags/Sass/"}]},{"title":"Sass 编译","slug":"Sass 编译","date":"2020-07-10T02:09:26.000Z","updated":"2020-07-14T10:44:41.647Z","comments":true,"path":"2020/07/10/Sass 编译/","link":"","permalink":"http://yoursite.com/2020/07/10/Sass%20%E7%BC%96%E8%AF%91/","excerpt":"Sass 安装过于简单 … 略 单文件编译1sass &lt;要编译的 Sass 文件路径&gt;/style.scss:&lt;要输出 CSS 文件路径&gt;/style.css 这是对一个单文件进行编译，如果想对整个项目所有 Sass 文件编译成 CSS 文件，可以这样操作： 多文件编译1sass sass/:css/ 上面的命令表示将项目中 sass 文件夹中所有 .scss(.sass) 文件编译成 .css 文件 并且将这些 CSS 文件都放在项目中 css 文件夹中","text":"Sass 安装过于简单 … 略 单文件编译1sass &lt;要编译的 Sass 文件路径&gt;/style.scss:&lt;要输出 CSS 文件路径&gt;/style.css 这是对一个单文件进行编译，如果想对整个项目所有 Sass 文件编译成 CSS 文件，可以这样操作： 多文件编译1sass sass/:css/ 上面的命令表示将项目中 sass 文件夹中所有 .scss(.sass) 文件编译成 .css 文件 并且将这些 CSS 文件都放在项目中 css 文件夹中 开启 watch 功能开启后只要被 watch 的文件进行修改并保存 就能自动监测到代码的变化，并且再次编译到指定目录： 1sass --watch &lt;要编译的 Sass 文件路径&gt;/style.scss:&lt;要输出 CSS 文件路径&gt;/style.css Sass 不同样式风格的输出方法众所周知，每个人编写的 CSS 样式风格都不一样 有的喜欢将所有样式代码都写在同一行，而有的喜欢将样式分行书写 在 Sass 中编译出来的样式风格也可以按不同的样式风格显示 其主要包括以下几种样式风格： 嵌套输出方式 nested (默认风格) 展开输出方式 expanded (浏览舒适) 紧凑输出方式 compact (长文件首选) 压缩输出方式 compressed (上线专用) 用法： 1sass &lt;要编译的 Sass 文件路径&gt;/style.scss:&lt;要输出 CSS 文件路径&gt;/style.css --style expanded 常见的编译错误在编译 Sass 代码时常常会碰到一些错误，让编译失败 这样的错误有系统造成的也有人为造成的，但大部分都是人为过失引起编译失败 而最为常见的一个错误就是字符编译引起的 在 Sass 的编译的过程中，是不是支持 GBK 编码的 所以在创建 Sass 文件时，就需要将文件编码设置为 utf-8 另外一个错误就是路径中的中文字符引起的 建议在项目中文件命名或者文件目录命名不要使用中文字符 而至于人为失误造成的编译失败，在编译过程中都会有具体的说明 大家可以根据编译器提供的错误信息进行对应的修改","categories":[],"tags":[{"name":"Sass","slug":"Sass","permalink":"http://yoursite.com/tags/Sass/"}]},{"title":"自定义样式文件","slug":"自定义样式文件","date":"2019-11-11T04:23:10.000Z","updated":"2020-07-29T10:13:38.810Z","comments":true,"path":"2019/11/11/自定义样式文件/","link":"","permalink":"http://yoursite.com/2019/11/11/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%B7%E5%BC%8F%E6%96%87%E4%BB%B6/","excerpt":"新建 customize_main.0cf68a.css 样式文件用途：用于覆盖 main.0cf68a.css 样式文件里与自定义样式重复的默认样式(建议：备份后直接修改源文件) 应用：主题文件目录下的 _config.yml 中添加 12# 启用自定义样式文件customize: true","text":"新建 customize_main.0cf68a.css 样式文件用途：用于覆盖 main.0cf68a.css 样式文件里与自定义样式重复的默认样式(建议：备份后直接修改源文件) 应用：主题文件目录下的 _config.yml 中添加 12# 启用自定义样式文件customize: true 打开 E:\\Projects\\blog\\themes\\yilia\\layout\\_partial\\head.ejs 文件 在 &lt;%- partial(&#39;css&#39;) %&gt; 行后面添加如下代码 1234&lt;% if (theme.customize)&#123; %&gt; &lt;link href=\"//cdn.bootcss.com/animate.css/3.5.0/animate.min.css\" rel=\"stylesheet\"&gt; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"/./customize_main.0cf68a.css\"&gt;&lt;% &#125; %&gt; 这样子网页就会加载自定义的样式文件，并覆盖默认样式里与自定义重复的样式 也就是必须先加载默认样式文件后再加载自定义样式文件，才能达到覆盖的效果 以后有关修改样式就在这个文件里操作啦…","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"搭建 Hexo 博客","slug":"搭建 Hexo 博客","date":"2019-11-09T16:04:14.000Z","updated":"2020-07-29T13:35:43.266Z","comments":true,"path":"2019/11/10/搭建 Hexo 博客/","link":"","permalink":"http://yoursite.com/2019/11/10/%E6%90%AD%E5%BB%BA%20Hexo%20%E5%8D%9A%E5%AE%A2/","excerpt":"本教程基于Windows：","text":"本教程基于Windows： 建议：安装node前先安装好git，利用Git Bash Here可以完美替换cmd 理由：它是一个非常好的命令行哈，完美兼容Linux与win命令 Git安装配置教程 基础准备安装环境 到 官网 下载并安装node.js LTS版本 安装完成后打开cmd命令提示符输入以下命令查看node.js和npm的版本 12node -vnpm -v 安装包管理器由于国内镜像源安装很慢，所以先利用npm(包管理器)安装cnpm，命令如下： 1npm install -g cnpm --registry=https://registry.npm.taobao.org 安装hexo博客框架1cnpm install -g hexo-cli 安装完成后查看版本 1hexo -v 基本命令12345678node -v // 查看node版本npm -v // 查看包管理器版本shdo hexo init // 初始化博客hexo n // 新建帖子hexo clean // 清理hexo g // 生成hexo s // 启动本地博客hexo d // 部署到远端 创建专属博客的文件夹也就是博客的根目录，整个博客都基于这个文件夹 cd到硬盘理想的位置，文件夹命名随意 (建议规范命名) 1mkdir blog 进入博客根目录 1cd blog 初始化博客 1sudo hexo init 初始化完成后会提示：Start bloggers with Hexo！ 启动博客1hexo s 用浏览器打开本地主机的博客地址，按 Ctrl + C 停止本地博客 http://localhost:4000 新建一篇文章 1hexo n \"文章名称\" 打开编辑文章：盘符:/……/blog/source/_posts/“你的文章名称.md” 建议使用Typora软件来编辑md文件 编辑完成后保存退出并回到博客的根目录 清理博客，然后生成新的博客 12hexo cleanhexo g 再次启动博客就可以看到刚刚编辑的文章了 本地博客这样就完成啦！也没有多少条命令哈哈 嗯，一切都这么简单，优雅… 部署到远端GitHub (免费(访问速度不理想)) 登录GitHub(没有请先免费注册https://github.com) 新建一个仓库(用于存放git推上来的博客资源文件) * 该仓库的命名要求：/你GitHub的昵称.github.io 后续就可以用 https://你GitHub的昵称.github.io 访问博客了 安装git插件1cnpm install --save hexo-deployer-git 在根目录下打开 _config.yml 配置文件 在 # Deployment (部署方式)下设定部署到远端的地址 1234deploy: type: git repo: 这里的地址为你刚才新建的仓库地址 branch: master 修改完配置文件后保存退出(vim命令：按Esc退出编辑模式进入命令模式后，:wq) 把博客推送到远端第一次推送需要登录GitHub账号及密码 12hexo d // 部署到远端服务器hexo g -d // 生成博客并部署到远端 然后你就可以在仓库看到那些关于博客生成的资源文件了 用 https://你GitHub的昵称.github.io 就可以让别人访问你的博客了 从此以后你就可以利用 md 文档编写你的博客了 更换主题从GitHub克隆yilia主题到本地 12git clone https://github.com/litten/hexo-theme-yilia.git themes/yiliagit clone https://github.com/theme-next/hexo-theme-next.git themes/next 更改根目录配置文件的主题参数 修改hexo根目录下的 _config.yml 文件 1theme: yilia 日常三步走123hexo clean // 清理hexo g // 生成hexo s // 启动本地博客 深入修改样式自定义样式文件新建 customize_main.0cf68a.css 样式文件 用途：用于覆盖main.0cf68a.css样式文件里与自定义样式重复的默认样式 应用：主题文件目录下的_config.yml中添加 12# 启动自定义样式文件customize: true 打开 E:\\Projects\\blog\\themes\\yilia\\layout\\_partial\\head.ejs 文件 在 &lt;%- partial(&#39;css&#39;) %&gt; 行后面添加如下代码 1234&lt;% if (theme.customize)&#123; %&gt; &lt;link href=\"//cdn.bootcss.com/animate.css/3.5.0/animate.min.css\" rel=\"stylesheet\"&gt; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"/./customize_main.0cf68a.css\"&gt;&lt;% &#125; %&gt; 这样子网页就会加载自定义的样式文件，并覆盖默认样式里与自定义重复的样式 也就是必须先加载默认样式文件后再加载自定义样式文件，才能达到覆盖的效果 注意：在以下样式代码中customize_main.0cf68a.css文件的样式会覆盖main.0cf68a.css文件的样式 添加来必力评论系统注册登录来必力官网，安装来必力系统， 在 E:\\Projects\\blog\\themes\\yilia\\layout\\_partial\\post 目录下新建 livere.ejs 文件后打开粘贴 copy下来的安装代码： 123456789101112131415&lt;!-- 来必力City版安装代码 --&gt;&lt;div id=\"lv-container\" data-id=\"city\" data-uid=\"&lt;%=theme.livere_uid%&gt;\"&gt; &lt;script type=\"text/javascript\"&gt; (function(d, s) &#123; var j, e = d.getElementsByTagName(s)[0]; if (typeof LivereTower === 'function') &#123; return; &#125; j = d.createElement(s); j.src = 'https://cdn-city.livere.com/js/embed.dist.js'; j.async = true; e.parentNode.insertBefore(j, e); &#125;)(document, 'script'); &lt;/script&gt;&lt;noscript&gt; 为正常使用来必力评论功能请激活JavaScript &lt;/noscript&gt;&lt;/div&gt;&lt;!-- City版安装代码已完成 --&gt; 打开 E:\\Projects\\blog\\themes\\yilia目录下的 _config.yml 主题配置文件 在评论的区域加入来必力评论系统的 ID 12#0、来必力livere_uid: MTAyMC80NzI1OS8yMzc1OQ 来必力评论系统优化解决方案： 打开 E:\\Projects\\blog\\themes\\yilia\\layout\\_partial\\article.ejs 文件 在第 &lt;% if (!index &amp;&amp; post.comments){ %&gt; 行后添加如下代码： 12345678910&lt;div class=\"comment-area-lessroc\"&gt; &lt;!-- 来必力评论系统 --&gt; &lt;% if (theme.livere)&#123; %&gt; &lt;%- partial('post/livere', &#123; key: post.slug, title: post.title, url: config.url+url_for(post.path) &#125;) %&gt; &lt;% &#125; %&gt; &lt;/div&gt; 打开 E:\\Projects\\blog\\themes\\yilia\\source\\customize_main.0cf68a.css 自定义样式文件 为来必力系统添加CSS样式： 1234567891011121314151617181920212223242526/* 来必力样式代码 */.comment-area-customize &#123; line-height: 1.8em; padding-right: 7.6923%; padding-left: 7.6923%; margin: 0 30px; background-color: #FFF; overflow: hidden; -webkit-box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12); box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12); border-radius: 18px;&#125;/* 来必力背景过渡 */ .comment-area-customize &#123; background: hsla(0, 0%, 100%, .3);&#125;/* 移动端来必力样式 */@media screen and (max-width: 800px) &#123; .comment-area-customize &#123; margin: auto; background-color: #FFF; &#125; .mid-col.show .comment-area-customize &#123; background: hsla(0, 0%, 100%, .3) &#125;&#125; 文章类型标签优化把标签位置迁移到文章标题下方： 打开 E:\\Projects\\blog\\themes\\yilia\\layout\\_partial\\article.ejs 文件 在 12345&lt;!-- 文章标题与文章日期 --&gt;&lt;%- partial('post/title', &#123;class_name: 'article-title'&#125;) %&gt;&lt;% if (!post.noDate)&#123; %&gt; &lt;%- partial('post/date', &#123;class_name: 'archive-article-date', date_format: null&#125;) %&gt;&lt;% &#125; %&gt; 代码块的下方添加如下代码： 1234567891011&lt;!-- 把下方的文章标签代码连同样式一并上移到文章标题的下方 --&gt;&lt;div class=\"article-info article-info-index-lessroc\"&gt; &lt;%if(post.top)&#123;%&gt; &lt;div class=\"article-pop-out tagcloud\"&gt; &lt;i class=\"icon-tuding\"&gt;&lt;/i&gt; &lt;a class=\"article-tag-list-link color3\"&gt;置顶&lt;/a&gt; &lt;/div&gt; &lt;% &#125; %&gt; &lt;%- partial('post/tag') %&gt; &lt;%- partial('post/category') %&gt;&lt;/div&gt; 然后删除该文件下方的标签代码。 打开 E:\\Projects\\blog\\themes\\yilia\\source\\customize_main.0cf68a.css 文件添加自定义的样式代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445/* 文章类型标签优化 */.article-info-index.article-info-customize &#123; margin: 10px 0; min-height: 20px;&#125;/* 文章类型标签移动端优化 */@media screen and (max-width: 800px) &#123; .article-info-index.article-info-customize &#123; margin: 10px 0 20px; min-height: 20px; &#125;&#125;/* 标签tag开关微调 */.tools-col .tools-section .search-tag.tagcloud .search-switch input:after &#123; top: 104%; left: 3px; width: 11px; height: 11px; background-color: #64BD63;&#125;.tools-col .tools-section .search-tag.tagcloud .search-switch input:checked:after &#123; left: 28px; width: 12px; height: 12px;&#125;/* 标签云背景优化 */.tools-col .tools-section .search-tag.tagcloud .article-tag-list &#123; border-radius: 8px;&#125;/* 标签云选中文章鼠标悬停背景圆角优化 */.tools-col .tools-section .search-ul .search-li:hover &#123; background: hsla(0, 0%, 100%, .2); border-radius: 8px;&#125;/* 隐藏标签云文章分割线 */.tools-col .tools-section .search-ul .search-li &#123; margin: 0 30px 0 10px; padding: 10px 10px; border-bottom: 0 dotted #dcdcdc;&#125;@media screen and (max-width: 800px) &#123; .tools-col .tools-section .search-ul .search-li &#123; margin: 0 20px 0 10px; &#125;&#125; 干掉文章标题前的小黑块打开 customize_main.0cf68a.css 文件添加自定义的样式代码： 12345/* 干掉文章标题前的小黑块 */.article-header &#123; border-left: none; padding: 30px 7.6923% 15px;&#125; 展开全文按钮优化打开 customize_main.0cf68a.css 文件添加自定义的样式代码： 123456789101112131415161718192021/* 展开全文按钮优化 */.article-more-link &#123; float: left;&#125;.article-more-link a &#123; background: rgba(77, 77, 77, 0.2); color: #999999; border-radius: 18px;&#125;.mid-col.show .article .article-more-link a &#123; background: rgba(77, 77, 77, 0.1); color: #999999;&#125;.article-more-link a:hover &#123; color: #FFFFFF; background: #39C7F7&#125;.mid-col.show .article .article-more-link a:hover &#123; color: #FFFFFF; background: #39C7F7&#125; 文章标题优化打开 customize_main.0cf68a.css 文件添加自定义的样式代码： 123456789101112131415/* 文章标题行距优化 */a.article-title:hover &#123; color: #39C7F7;&#125;.article-entry h1 &#123; text-align: center; font-weight: 500; margin-top: 2em;&#125;.article-entry h2, .article-entry h3, .article-entry h4, .article-entry h5, .article-entry h6 &#123; margin-top: 40px; margin-bottom: 0; color: #574c4c; font-weight: 500;&#125; 文章日期优化打开 customize_main.0cf68a.css 文件添加自定义的样式代码： 12345678910111213/* 文章日期优化 */.archive-article-date &#123; margin-right: 0;&#125;.archive-article-date:hover &#123; color: #39C7F7;&#125;.archive-article-inner .article-meta .archive-article-date &#123; cursor: pointer;&#125;.archive-article-date:hover time &#123; color: #39C7F7;&#125; 文章文本行距优化打开 customize_main.0cf68a.css 文件添加自定义的样式代码： 123456/* 文章文本行距优化 */.article-entry p,.article-entry table &#123; line-height: 1.8em; margin: .5em 0;&#125; 文章归档框圆角化打开 customize_main.0cf68a.css 文件添加自定义的样式代码： 12345678910111213141516171819202122/* 文章归档框圆角化 */.article &#123; border: 0; /*overflow: hidden;*/ -webkit-box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12); box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12); border-radius: 18px;&#125;.archives-wrap &#123; background: rgba(255, 255, 255, 0.5); -webkit-box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12); box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12); /*border-radius: 18px;*/&#125;.archives-wrap:first-child &#123; margin-top: 30px; border-radius: 18px 18px 0 0;&#125;.archives-wrap:last-child &#123; margin-bottom: 80px; border-radius: 0 0 18px 18px;&#125; 文章行内代码块优化打开 customize_main.0cf68a.css 文件添加自定义的样式代码： 1234567891011121314/* 文章行内代码块优化 */.article-entry li code, .article-entry p code &#123; padding: 3px 3px; margin: 0 3px; background: rgba(57, 199, 247, 0.4); border: none; border-radius: 5px; word-wrap: break-word; font-size: 14px; font-family: \"DejaVu Sans Mono\", Menlo, Monaco, Andale Mono, Microsoft YaHei, lucida console, Courier New, monospace;&#125;.mid-col.show .article-entry li code, .mid-col.show .article-entry p code &#123; background: rgba(57, 199, 247, 0.2);&#125; 文章代码块优化打开 customize_main.0cf68a.css 文件添加自定义的样式代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192/* 文章代码块优化 */.article-entry .highlight &#123; border-radius: 8px; transition: all .2s ease-in;&#125;.article-entry .highlight .line &#123; color: #fff; min-height: 19px; overflow-x: auto; white-space: pre; font-family: \"DejaVu Sans Mono\", Menlo, Monaco, Andale Mono, Microsoft YaHei, lucida console, Courier New, monospace;&#125;.article-entry pre &#123; background: none;&#125;.article-entry .highlight &#123; background: rgba(39, 40, 34, .7);&#125;.article-entry .highlight:hover &#123; background: rgba(39, 40, 34, 1);&#125;.mid-col.show .article-entry .highlight &#123; background: rgba(39, 40, 34, .3);&#125;.mid-col.show .article-entry .highlight:hover &#123; background: rgba(39, 40, 34, 1);&#125;/* 禁止代码块行号被鼠标选中 */.gutter pre &#123; moz-user-select: -moz-none; -moz-user-select: none; -o-user-select:none; -khtml-user-select:none; -webkit-user-select:none; -ms-user-select:none; user-select:none;&#125;/* 代码块行号右边框填充 */.article-entry .highlight .gutter pre &#123; color: #999; padding-right: 10px; border-right: 1px solid #999;&#125;.article-entry .highlight .code pre &#123; padding-left: 10px;&#125;/* 行号颜色 */.article-entry .highlight .gutter pre .line &#123; color: #999; text-shadow: 0 1px #444;&#125;/* 代码块样式之评论：黄色 */pre .comment &#123; color:#ffec8b&#125;/* 代码块样式之类的参数、函数的关键字、关键字：蓝色 */pre .class .params, pre .function .keyword, pre .keyword, pre .literal &#123; color:#66d9ef&#125;/* 代码块样式之css的属性值、函数名、参数、标签：白色 */pre .css .value, pre .doctype, pre .function, pre .params, pre .tag &#123; color:#ccc /* color:#66d9ef; */&#125;/* 代码块样式之HTML或者xml的头部元素：红色(颜色较浅) */pre .meta&#123; color:#f78da1;&#125;/* 代码块样式之HTML的标签：红色 */pre .tag .name &#123; /* color:#dc3958; */ color:#ff6481;&#125;/* 代码块样式之：色 */pre .at_rule, pre .at_rule .keyword, pre .css~* .tag, pre .preprocessor, pre .preprocessor .keyword, pre .title&#123; color:#fa9400&#125;/* 代码块样式之属性、类、函数的title：绿色 */pre .attr,pre .attribute, pre .built_in, pre .class, pre .css~* .class, pre .function .title &#123; color:#a6e22e&#125;/* 代码块样式之字符串、属性值：猪肝色 */pre .string, pre .value &#123; color:#e6db74&#125;/* 代码块样式之数字：粉红色 */pre .number &#123; color:#ffe4b5&#125;pre .css~* .id, pre .id &#123; color:#fd971f&#125; 文章代码块复制功能在 hexo 的根目录下的 themes\\yilia\\source\\js 中新建 clipboard_use.js 如下: 注意 : 按钮中的字体图标需引入Font Awesome图标库，详见Font Awesome 中文网 1234567891011121314151617181920212223242526272829303132$(\".highlight\").wrap(\"&lt;div class='code-wrapper' style='position:relative'&gt;&lt;/div&gt;\");/*页面载入完成后，创建复制按钮*/!function (e, t, a) &#123; /* code */ var initCopyCode = function () &#123; var copyHtml = ''; copyHtml += '&lt;button class=\"btn-copy\" data-clipboard-snippet=\"\"&gt;'; copyHtml += ' &lt;i class=\"fa fa-clipboard\"&gt;&lt;/i&gt;&lt;span&gt;复制&lt;/span&gt;'; copyHtml += '&lt;/button&gt;'; $(\".highlight .code\").before(copyHtml); var clipboard = new ClipboardJS('.btn-copy', &#123; target: function (trigger) &#123; return trigger.nextElementSibling; &#125; &#125;); clipboard.on('success', function (e) &#123; e.trigger.innerHTML = \"&lt;i class='fa fa-check' style='color:green'&gt;&lt;/i&gt;&lt;span style='color:green'&gt;复制成功&lt;/span&gt;\" setTimeout(function () &#123; e.trigger.innerHTML = \"&lt;i class='fa fa-clipboard'&gt;&lt;/i&gt;&lt;span&gt;复制&lt;/span&gt;\" &#125;, 1000) e.clearSelection(); &#125;); clipboard.on('error', function (e) &#123; e.trigger.innerHTML = \"&lt;i class='fa fa-exclamation' style='color:red'&gt;&lt;/i&gt;&lt;span style='color:red'&gt;复制失败&lt;/span&gt;\" setTimeout(function () &#123; e.trigger.innerHTML = \"&lt;i class='fa fa-clipboard'&gt;&lt;/i&gt;&lt;span&gt;复制&lt;/span&gt;\" &#125;, 1000) e.clearSelection(); &#125;); &#125; initCopyCode();&#125;(window, document); 在hexo的根目录下的themes\\yilia\\layout\\layout.ejs文件的&lt;/body&gt;前引入 1234&lt;!-- 代码块复制功能 --&gt;&lt;script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/clipboard@2.0.4/dist/clipboard.js\"&gt;&lt;/script&gt;&lt;script type=\"text/javascript\" src=\"https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js\"&gt;&lt;/script&gt;&lt;script type=\"text/javascript\" src=\"/js/clipboard_use.js\"&gt;&lt;/script&gt; 打开 customize_main.0cf68a.css 文件添加自定义的样式代码： 1234567891011121314151617181920212223242526272829303132/* 文章代码块复制功能 */.btn-copy &#123; display: inline-block; cursor: pointer; background-color: #eee; background-image: linear-gradient(#fcfcfc, #eee); border: 1px solid #d5d5d5; border-radius: 3px;. -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; -webkit-appearance: none; font-size: 13px; font-weight: 700; line-height: 20px; color: #333; -webkit-transition: opacity .3s ease-in-out; -o-transition: opacity .3s ease-in-out; transition: opacity .3s ease-in-out; padding: 2px 6px; position: absolute; right: 5px; top: 5px; opacity: 0;&#125;.btn-copy span &#123; margin-left: 5px;&#125;.highlight:hover .btn-copy &#123; opacity: 1;&#125; 参考：https://www.yansheng.xyz/article/e9d1b881.html 文章字体优化打开 customize_main.0cf68a.css 文件添加自定义的样式代码： 1234/* 文章字体优化 */body, button, input, select, textarea &#123; font-family: \"DejaVu Sans Mono\", lucida grande, lucida sans unicode, lucida, helvetica, Hiragino Sans GB, Microsoft YaHei, WenQuanYi Micro Hei, sans-serif;&#125; 文章超链接优化123456789101112131415161718192021222324252627282930313233343536373839404142/* 文章超链接优化 *//* 文章中的超链接,鼠标悬浮特效 */.article-entry a&#123; display: inline-block; position: relative; color: #08c;&#125;/* 鼠标悬浮时，变色 */.article-entry a:hover &#123; color: #d7191a; transition: .4s ease-in-out;&#125;/* 鼠标悬浮时，变色, 赞赏按钮例外 */.article-entry a:hover .tooltip-item &#123; color: #fff;&#125;/* 鼠标悬浮时，下划线从中间向两边延伸 */.article-entry a:hover::after &#123; transform: scaleX(1); /* 旋转，与transform连用；这里作用：鼠标悬浮时，底部的下划线从中间扩散到两边。 bottom right :左到右出现，左到右消失（需配合上面的::after）*/ transform-origin: bottom center;&#125;/* 鼠标移开后，下划线从两边向中间消失 */.article-entry a::after &#123; content: ''; position: absolute; width: 100%; transform: scaleX(0); height: .1rem; bottom: 0; left: 0; background-color: #08c; /* 详见：https://www.w3school.com.cn/cssref/pr_transform-origin.asp, 旋转，与transform连用；这里作用：鼠标移开后，底部的下划线从中间开始消失 */ transform-origin: bottom center; transition: transform .3s ease-out;&#125;/* 赞赏超链接例外 */.page-reward a::after &#123; content: none;&#125; 文章图片优化123456789101112131415161718192021222324252627282930313233/* 文章图片优化 */.article img &#123; display:block; margin-left: auto; margin-right:auto; opacity: .7; border-radius: 8px; transition: all .2s ease-in;&#125;.mid-col.show .article img &#123; opacity: 0.3; transition: all .2s ease-in;&#125;.mid-col.show .article img:hover &#123; opacity: 1;&#125;/* 文章图片全屏时降低遮罩 */.pswp__bg &#123; opacity: .8!important;&#125;/* 文章赞赏二维码区域优化 */.reward-box-item .reward-img &#123; opacity: 1;&#125;.page-reward .reward-type &#123; color: #fff;&#125;.tooltip-top .tooltip:hover .tooltip-text &#123; border-radius: 8px;&#125;.tooltip-top .tooltip-text &#123; transition: all .3s ease-in-out;&#125; 左列个人主页优化干掉头像上方的颜色方块 打开 E:\\Projects\\blog\\themes\\yilia\\layout\\_partial\\left-col.ejs 文件 注释或者删除如下这行代码： 123&lt;!-- 注释了头像上方的颜色方块&lt;div class=\"overlay\" style=\"background: &lt;%= theme.style &amp;&amp; theme.style.header ? theme.style.header : defaultBg %&gt;\"&gt;&lt;/div&gt;--&gt; 主页随笔取消换行 注释或者删除如下这行代码的 &lt;li&gt; 标签： 12&lt;!-- 主页随笔取消换行 --&gt;&lt;!--&lt;li&gt;--&gt;&lt;a href=\"&lt;%- url_for(theme.menu[i]) %&gt;\"&gt;&lt;%= i %&gt;&lt;/a&gt;&lt;!--&lt;/li&gt;--&gt; 个人主页样式优化 打开 customize_main.0cf68a.css 文件添加自定义的样式代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103/* 左列个人主页优化 */.left-col &#123; margin: 30px 0; height: 91.5%; /* overflow: hidden; */ -webkit-box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12); box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12); border-radius: 0 18px 18px 0;&#125;/*左列背景过渡到透明*/.left-col.show &#123; background: hsla(0, 0%, 0%, .0); box-shadow: 0 0 0 0 rgba(0, 0, 0, .0); margin: 30px auto; border-radius: 0;&#125;/* 头像优化 */.left-col .intrude-less &#123; margin: 12% auto 0;&#125;.left-col #header .profilepic &#123; border: 0 solid #fff; -webkit-box-shadow: 0 0 0 2px rgba(255,255,255,0.5), 0px 2px 20px 3px rgba(0,0,0,0.25); box-shadow: 0 0 0 2px rgba(255,255,255,0.5), 0px 2px 20px 3px rgba(0,0,0,0.25);&#125;/* 头像跃动 */.left-col #header .profilepic:hover &#123; -webkit-animation: jello 1s; animation: jello 1s;&#125;/* 移动端头像优化 */@media screen and (max-width: 800px) &#123; .profilepic &#123; width: 100px; height: 100px; margin: 15px auto 30px; border: 0 solid #fff; -webkit-box-shadow: 0 0 0 2px rgba(255,255,255,0.5), 0px 2px 20px 3px rgba(0,0,0,0.25); box-shadow: 0 0 0 2px rgba(255,255,255,0.5), 0px 2px 20px 3px rgba(0,0,0,0.25); &#125; /* 头像跃动 */ .profilepic:hover &#123; -webkit-animation: jello 1s; animation: jello 1s; &#125;&#125;/*!*头像旋转360°，鼠标离开后又转回来，代码如下:*!.left-col #header .profilepic img &#123; !* 控制旋转速度时间*! -webkit-transition: -webkit-transform 1.0s ease-out; -moz-transition: -moz-transform 1.0s ease-out; transition: transform 1.0s ease-out;&#125;.left-col #header .profilepic img:hover &#123; !* 鼠标经过360% *! -webkit-transform: rotateZ(360deg); -moz-transform: rotateZ(360deg); transform: rotateZ(360deg);&#125;*//* 个人描述字体粗细 */.left-col #header .header-subtitle &#123; font-weight: 300;&#125;/* 所有文章 友链 关于我 */.left-col #header a &#123; font-weight: 300;&#125;.left-col #header .header-smart-menu a:after &#123; content: \"\";&#125;/* 主页随笔自动居中 */.left-col #header .header-menu &#123;margin: auto;&#125;/* 主页随笔移动端按钮高亮并增大头像背景高度 */@media screen and (max-width: 800px) &#123; .header-menu li a:hover &#123; color: #FFFFFF; background: #39C7F7 &#125; #mobile-nav .overlay &#123; height: 150px; &#125;&#125;/* 跳转到站外按钮高亮 */#header .header-nav .social a.github:hover &#123; background: #000000; border: 1px solid #000000;&#125;#header .header-nav .social a.weibo:hover &#123; background: #E6162D; border: 1px solid #E6162D;&#125;#header .header-nav .social a.rss:hover &#123; background: #FF6600; border: 1px solid #FF6600;&#125;#header .header-nav .social a.zhihu:hover &#123; background: #0E88EB; border: 1px solid #0E88EB;&#125; 移动端三点式菜单页面优化123456789101112131415161718192021222324252627/* 移动端三点式菜单页面优化 */@media screen and (max-width: 800px) &#123; /* 菜单页面宽度 */ .tools-col .tools-section, .tools-col .tools-wrap &#123; width: 333px; &#125; /* 搜索按钮偏移 */ .tools-col .tools-section .search-wrap, .tools-col .tools-wrap .search-wrap &#123; width: 292px; &#125; /* 搜索边框偏移 */ .tools-col .tools-section .search-wrap .search-ipt &#123; width: 293px; &#125; /* 标签余量归零 */ .tools-col .tools-section .search-tag.tagcloud, .tools-col .tools-wrap .search-tag.tagcloud &#123; margin-right: 0; &#125; /* 标签提示符tag:偏移 */ .tools-col .tools-section .search-tag.tagcloud .search-tag-wording &#123; margin: 4px 69px 0 0; &#125; /* 标签按钮偏移 */ .tools-col .tools-section .search-tag.tagcloud .search-switch input &#123; width: 34px; &#125;&#125; 增大移动端文章间隔123456/* 增大移动端文章间隔 */@media screen and (max-width: 800px) &#123; .article &#123; margin: 20px 0; &#125;&#125; 添加公众号打开 E:\\Projects\\blog\\themes\\yilia\\_config.yml 文件 将menu拆分为如下： 123456menu: 主页: /menu1: 公众号:menu2: 相册: /404/index.html 打开 E:\\Projects\\blog\\themes\\yilia\\layout\\_partial\\left-col.ejs 文件 主页相册的更改： 1234567891011121314&lt;nav class=\"header-menu\"&gt; &lt;ul&gt; &lt;% for (var i in theme.menu)&#123; %&gt; &lt;a href=\"&lt;%- url_for(theme.menu[i]) %&gt;\"&gt;&lt;%= i %&gt;&lt;/a&gt; &lt;%&#125;%&gt; &lt;% for (var i in theme.menu1)&#123; %&gt; &lt;a class=\"show_img\" href=\"#\"&gt;&lt;%= i %&gt;&lt;/a&gt; &lt;div class=\"hide_img\"&gt;&lt;img src=\"/img/lessroc.jpg\" alt=\"公众号\"&gt;&lt;/div&gt; &lt;%&#125;%&gt; &lt;% for (var i in theme.menu2)&#123; %&gt; &lt;a href=\"&lt;%- url_for(theme.menu2[i]) %&gt;\"&gt;&lt;%= i %&gt;&lt;/a&gt; &lt;%&#125;%&gt; &lt;/ul&gt;&lt;/nav&gt; 打开 E:\\Projects\\blog\\themes\\yilia\\layout\\_partial\\mobile-nav.ejs 文件 移动端主页相册的更改： 1234567891011121314151617&lt;nav class=\"header-menu js-header-menu\"&gt; &lt;ul style=\"width: &lt;%= ulWidth %&gt;\"&gt; &lt;% var divide = 100 / count + '%' %&gt; &lt;% for (var i in theme.menu)&#123; %&gt; &lt;li style=\"width: &lt;%= divide %&gt;\"&gt;&lt;a href=\"&lt;%- url_for(theme.menu[i]) %&gt;\"&gt;&lt;%= i %&gt;&lt;/a&gt;&lt;/li&gt; &lt;%&#125;%&gt; &lt;% var divide = 100 / count + '%' %&gt; &lt;% for (var i in theme.menu1)&#123; %&gt; &lt;li class=\"show_image\" style=\"width: &lt;%= divide %&gt;\"&gt;&lt;a href=\"#\"&gt;&lt;%= i %&gt;&lt;/a&gt;&lt;/li&gt; &lt;div class=\"hide_image\"&gt;&lt;img src=\"/img/lessroc.jpg\" alt=\"公众号\"&gt;&lt;/div&gt; &lt;%&#125;%&gt; &lt;% var divide = 100 / count + '%' %&gt; &lt;% for (var i in theme.menu2)&#123; %&gt; &lt;li style=\"width: &lt;%= divide %&gt;\"&gt;&lt;a href=\"&lt;%- url_for(theme.menu2[i]) %&gt;\"&gt;&lt;%= i %&gt;&lt;/a&gt;&lt;/li&gt; &lt;%&#125;%&gt; &lt;/ul&gt;&lt;/nav&gt; 打开 E:\\Projects\\blog\\themes\\yilia\\source\\customize_main.0cf68a.css 样式文件 为以上更改添加样式： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263/* 公众号 */.show_img &#123; padding-bottom: 5px;&#125;.hide_img &#123; position: absolute; z-index: 9999; display: block; width: 50px; margin: auto 40px; -webkit-box-shadow: none; box-shadow: none; transition: all .2s ease-in;&#125;.hide_img:hover,.show_img:hover + .hide_img,.left-col.show .show_img:hover + .hide_img,.left-col.show .hide_img:hover &#123; display: block; width: 77%; margin: auto -22px; border-radius: 18px; -webkit-box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12); box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12);&#125;.show_img:hover + .hide_img img,.hide_img img &#123; transition: all .2s ease-in; background-color: rgba(255, 255, 255, 0);&#125;.show_img:hover + .hide_img img,.hide_img img:hover &#123; border-radius: 18px; background-color: rgba(255, 255, 255, 1);&#125;/* 左列弹出过渡 */.left-col.show .hide_img &#123; margin: auto 60px; width: 0; transition: all .2s ease-in;&#125;/*.left-col.show .show_img &#123; padding-bottom: 0;&#125;*//* 公众号移动端过渡 */@media screen and (max-width: 800px) &#123; .hide_image &#123; display: block; z-index: 9999; position: absolute; width: 0; margin: -19px auto; transition: all .2s ease-in; &#125; .show_image:hover + .hide_image &#123; display: block; width: 60px; margin: -48px auto; transition: all .2s ease-in; -webkit-box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12); box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12); &#125;&#125; 解决文章图片显示异常设置站点配置_config.yml: 将 post_asset_folder: false 改为 post_asset_folder: true安装插件:npm install https://github.com/CodeFalling/hexo-asset-image – save 单击上浮爱心页面点击出现爱心的实现在 \\blog\\themes\\yilia\\source 里新建一个 love.js 文件，加入如下代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051!function (e, t, a) &#123; function n() &#123; c(\".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;\"), o(), r() &#125; function r() &#123; for (var e = 0; e &lt; d.length; e++) d[e].alpha &lt;= 0 ? (t.body.removeChild(d[e].el), d.splice(e, 1)) : (d[e].y--, d[e].scale += .004, d[e].alpha -= .013, d[e].el.style.cssText = \"left:\" + d[e].x + \"px;top:\" + d[e].y + \"px;opacity:\" + d[e].alpha + \";transform:scale(\" + d[e].scale + \",\" + d[e].scale + \") rotate(45deg);background:\" + d[e].color + \";z-index:99999\"); requestAnimationFrame(r) &#125; function o() &#123; var t = \"function\" == typeof e.onclick &amp;&amp; e.onclick; e.onclick = function (e) &#123; t &amp;&amp; t(), i(e) &#125; &#125; function i(e) &#123; var a = t.createElement(\"div\"); a.className = \"heart\", d.push(&#123; el: a, x: e.clientX - 5, y: e.clientY - 5, scale: 1, alpha: 1, color: s() &#125;), t.body.appendChild(a) &#125; function c(e) &#123; var a = t.createElement(\"style\"); a.type = \"text/css\"; try &#123; a.appendChild(t.createTextNode(e)) &#125; catch (t) &#123; a.styleSheet.cssText = e &#125; t.getElementsByTagName(\"head\")[0].appendChild(a) &#125; function s() &#123; return \"rgb(\" + ~~(255 * Math.random()) + \",\" + ~~(255 * Math.random()) + \",\" + ~~(255 * Math.random()) + \")\" &#125; var d = []; e.requestAnimationFrame = function () &#123; return e.requestAnimationFrame || e.webkitRequestAnimationFrame || e.mozRequestAnimationFrame || e.oRequestAnimationFrame || e.msRequestAnimationFrame || function (e) &#123; setTimeout(e, 1e3 / 60) &#125; &#125;(), n()&#125;(window, document); 接着在\\blog\\themes\\yilia\\layout_partial\\footer.ejs的最后面加入如下代码： 1&lt;script type=\"text/javascript\" src=\"/love.js\"&gt;&lt;/script&gt; 添加文章目录为了方便查看每篇文章的目录结构，可以定位到想看的地方，特地找了下如何实现这个功能。 添加 CSS 样式打开 themes\\yilia\\source 目录新建 article_directory.css 文件后面添加如下代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291/* 文章目录样式 *//*#container .show-toc-btn, #container .toc-article1 &#123; display: block;&#125;*/.toc-article1 &#123; /*display: none;*/ top: 15%; z-index: 100; background: rgba(255, 255, 255, .7); border: 1px solid #ccc; max-width: 0; min-width: 0; max-height: 0; overflow-y: auto; font-size: 14px; padding: 10px; border-right: none; position: fixed; right: 40px; margin-right: 0; opacity: 0; transition: all .3s ease; border-radius: 18px 0 0 18px; text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.2); -webkit-box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12); -moz-box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12); -ms-box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12); -o-box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12); box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12);&#125;.show-toc-btn:hover + .toc-article1,.toc-article1:hover &#123; max-width: 500px; min-width: 150px; max-height: 500px; overflow-y: auto; opacity: 1;&#125;@media screen and (max-width: 800px) &#123; .toc-article1 &#123; top: 22.6%; right: 0; &#125;&#125;.toc-article1 .toc-close &#123; font-weight: 700; font-size: 20px; cursor: pointer; float: right; color: #ccc&#125;.toc-article1 .toc-close &#123; top: 130px; width: 25px; height: 150px; margin: -10px -10px auto;&#125;.toc-article1 .toc-close:hover &#123; color: #000&#125;.toc-article1 .toc &#123; font-size: 14px; padding: 0; line-height: 20px&#125;.toc-article1 .toc .toc-number &#123; color: #333&#125;.toc-article .toc .toc-text:hover,.toc-article1 .toc .toc-text:hover &#123; /*text-decoration: underline;*/ color: #2a6496&#125;.toc-article1 li &#123; list-style-type: none&#125;.toc-article1 .toc-level-1 &#123; margin: 4px 0&#125;@-moz-keyframes cd-bounce-1 &#123; 0% &#123; opacity: 0; -o-transform: scale(1); -webkit-transform: scale(1); -moz-transform: scale(1); -ms-transform: scale(1); transform: scale(1) &#125; 60% &#123; opacity: 1; -o-transform: scale(1.01); -webkit-transform: scale(1.01); -moz-transform: scale(1.01); -ms-transform: scale(1.01); transform: scale(1.01) &#125; 100% &#123; -o-transform: scale(1); -webkit-transform: scale(1); -moz-transform: scale(1); -ms-transform: scale(1); transform: scale(1) &#125;&#125;@-webkit-keyframes cd-bounce-1 &#123; 0% &#123; opacity: 0; -o-transform: scale(1); -webkit-transform: scale(1); -moz-transform: scale(1); -ms-transform: scale(1); transform: scale(1) &#125; 60% &#123; opacity: 1; -o-transform: scale(1.01); -webkit-transform: scale(1.01); -moz-transform: scale(1.01); -ms-transform: scale(1.01); transform: scale(1.01) &#125; 100% &#123; -o-transform: scale(1); -webkit-transform: scale(1); -moz-transform: scale(1); -ms-transform: scale(1); transform: scale(1) &#125;&#125;@-o-keyframes cd-bounce-1 &#123; 0% &#123; opacity: 0; -o-transform: scale(1); -webkit-transform: scale(1); -moz-transform: scale(1); -ms-transform: scale(1); transform: scale(1) &#125; 60% &#123; opacity: 1; -o-transform: scale(1.01); -webkit-transform: scale(1.01); -moz-transform: scale(1.01); -ms-transform: scale(1.01); transform: scale(1.01) &#125; 100% &#123; -o-transform: scale(1); -webkit-transform: scale(1); -moz-transform: scale(1); -ms-transform: scale(1); transform: scale(1) &#125;&#125;@keyframes cd-bounce-1 &#123; 0% &#123; opacity: 0; -o-transform: scale(1); -webkit-transform: scale(1); -moz-transform: scale(1); -ms-transform: scale(1); transform: scale(1) &#125; 60% &#123; opacity: 1; -o-transform: scale(1.01); -webkit-transform: scale(1.01); -moz-transform: scale(1.01); -ms-transform: scale(1.01); transform: scale(1.01) &#125; 100% &#123; -o-transform: scale(1); -webkit-transform: scale(1); -moz-transform: scale(1); -ms-transform: scale(1); transform: scale(1) &#125;&#125;.show-toc-btn &#123; display: block; top: 15%; z-index: 10; width: 35px; height: 120px; min-height: 14px; overflow: hidden; padding: 10px; letter-spacing: 10px; border: 1px solid #ddd; border-right: none; position: fixed; right: 40px; text-align: center; background-color: #f9f9f9; border-radius: 18px 0 0 18px; transition: all .3s ease;&#125;.show-toc-btn .btn-bg &#123; margin-top: 2px; display: block; width: 16px; height: 14px; background: url(http://7xtawy.com1.z0.glb.clouddn.com/show.png) no-repeat; -webkit-background-size: 100%; -moz-background-size: 100%; background-size: 100%&#125;.show-toc-btn .btn-text &#123; color: #999; font-size: 12px&#125;/*.show-toc-btn:hover .btn-bg &#123; background-position: 0 -16px&#125;.show-toc-btn:hover .btn-text &#123; font-size: 14px; !*color: #ea8010;*! !*color: #0088CC;*! color: #FFFFFF; !* background: #39C7F7 *!&#125;.show-toc-btn:hover &#123; background: #39C7F7&#125;*/.toc-article1 li ol, .toc-article1 li ul &#123; margin-left: 23px;&#125;.toc-article1 ol, .toc-article1 ul &#123; margin: 5px 0;&#125;/* 移动端文章导航 */@media screen and (max-width: 800px) &#123; .show-toc-btn &#123; top: 150px; right: 0; width: 10px; padding: 0; &#125; .show-toc-btn .btn-text &#123; font-size: 9px; &#125; /*.show-toc-btn:hover .btn-text &#123; font-size: 9px; &#125;*/ .toc-article1 &#123; top: 150px; right: -5px; border-radius: 18px 0 0 18px; &#125; .toc-article1 .toc-close &#123; top: 130px; width: 25px; height: 150px; margin: -10px -10px auto; &#125; .toc-article1 .toc-close:hover &#123; color: #000; &#125;&#125; 修改 aside.ejs 文件打开 themes\\yilia\\layout\\_partial 文件夹下的 aside.ejs 文件, 在 &lt;/aside&gt; 前一行加入如下内容（注意位置） 12345678910111213141516171819202122232425262728293031&lt;!-- 目录内容 --&gt;&lt;% if (!index &amp;&amp; post.toc)&#123; %&gt; &lt;p id=\"show-toc-btn\" class=\"show-toc-btn\" onmouseenter=\"showToc();\" onmouseleave=\"showBtn();\" style=\"display:block\"&gt; &lt;!-- &lt;span class=\"btn-bg\"&gt;&lt;/span&gt; --&gt; &lt;span class=\"btn-text\"&gt;文章目录&lt;/span&gt; &lt;/p&gt; &lt;div id=\"toc-article1\" class=\"toc-article1\" onmouseleave=\"showBtn();\" onmouseenter=\"showToc();\"&gt; &lt;!--&lt;span id=\"toc-close\" class=\"toc-close\" title=\"隐藏导航\"&gt;×&lt;/span&gt;--&gt; &lt;strong class=\"toc-title\"&gt;文章目录&lt;/strong&gt; &lt;%- toc(post.content) %&gt; &lt;/div&gt; &lt;script type=\"text/javascript\"&gt; function showToc()&#123; var toc_article = document.getElementById(\"toc-article1\") var show_toc_btn = document.getElementById(\"show-toc-btn\") // toc_article.setAttribute(\"style\",\"display:block\") // show_toc_btn.setAttribute(\"style\",\"display:none\") show_toc_btn.style.opacity = \"0\" // toc_article.style.marginRight = \"0\" &#125; function showBtn()&#123; var toc_article = document.getElementById(\"toc-article1\") var show_toc_btn = document.getElementById(\"show-toc-btn\") // toc_article.setAttribute(\"style\",\"display:none\"); // show_toc_btn.setAttribute(\"style\",\"display:block\"); show_toc_btn.style.opacity = \"1\" // toc_article.style.marginRight = \"-350px\" &#125; &lt;/script&gt;&lt;% &#125; %&gt;&lt;!-- 目录内容结束 --&gt; 然后若想要文章显示目录，在每篇文章开头加入：toc: true 即可 本目录与hexo自带的目录功能无关 添加彩带彩带1.鼠标点击自动替换彩带新建 \\yilia\\source\\js\\ribbon.js 文件，添加以下代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768/** * Copyright (c) 2016 hustcc * License: MIT * Version: v1.0.1 * GitHub: https://github.com/hustcc/ribbon.js**//*jshint -W030 */! function() &#123; function attr(node, attr, default_value) &#123; return Number(node.getAttribute(attr)) || default_value; &#125; // get user config var scripts = document.getElementsByTagName('script'), script = scripts[scripts.length - 1]; // 当前加载的script config = &#123; z: attr(script, \"zIndex\", -1), // z-index a: attr(script, \"alpha\", 0.6), // alpha s: attr(script, \"size\", 90), // size &#125;; var canvas = document.createElement('canvas'), g2d = canvas.getContext('2d'), pr = window.devicePixelRatio || 1, width = window.innerWidth, height = window.innerHeight, f = config.s, q, t, m = Math, r = 0, pi = m.PI*2, cos = m.cos, random = m.random; canvas.width = width * pr; canvas.height = height * pr; g2d.scale(pr, pr); g2d.globalAlpha = config.a; canvas.style.cssText = 'opacity: ' + config.a + ';position:fixed;top:0;left:0;z-index: ' + config.z + ';width:100%;height:100%;pointer-events:none;'; // create canvas document.getElementsByTagName('body')[0].appendChild(canvas); function redraw() &#123; g2d.clearRect(0, 0, width, height); q = [&#123;x: 0, y: height * 0.7 + f&#125;, &#123;x: 0, y: height * 0.7 - f&#125;]; while(q[1].x &lt; width + f) draw(q[0], q[1]); &#125; function draw(i, j) &#123; g2d.beginPath(); g2d.moveTo(i.x, i.y); g2d.lineTo(j.x, j.y); var k = j.x + (random()*2-0.25)*f, n = line(j.y); g2d.lineTo(k, n); g2d.closePath(); r -= pi / -50; g2d.fillStyle = '#'+(cos(r)*127+128&lt;&lt;16 | cos(r+pi/3)*127+128&lt;&lt;8 | cos(r+pi/3*2)*127+128).toString(16); g2d.fill(); q[0] = q[1]; q[1] = &#123;x: k, y: n&#125;; &#125; function line(p)&#123; t = p + (random() * 2 - 1.1) * f; return (t &gt; height || t &lt; 0) ? line(p) : t; &#125; document.onclick = redraw; document.ontouchstart = redraw; redraw();&#125;(); 打开 \\yilia\\layout\\layout.ejs 文件，在 &lt;%- partial(&#39;_partial/viewer&#39;) %&gt; 后添加以下代码： 12345&lt;!-- 彩带1.点击自动替换彩带 --&gt;&lt;% if (theme.ribbon)&#123; %&gt; &lt;!-- &lt;script src=\"https://g.joyinshare.com/hc/ribbon.min.js\" type=\"text/javascript\"&gt;&lt;/script&gt; --&gt; &lt;script type=\"text/javascript\" src=\"/js/ribbon.js\"&gt;&lt;/script&gt;&lt;% &#125; %&gt; 打开 \\yilia\\_config.yml 文件，添加以下代码： 123# https://github.com/hustcc/ribbon.js# 彩带1.点击自动替换彩带ribbon: true 彩带2.自动飘动新建 \\yilia\\source\\js\\ribbon_flow.js 文件，添加以下代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324(function (name, factory) &#123; if (typeof window === \"object\") &#123; window[name] = factory() &#125;&#125;)(\"Ribbons\", function () &#123; var _w = window, _b = document.body, _d = document.documentElement; var random = function () &#123; if (arguments.length === 1) &#123; if (Array.isArray(arguments[0])) &#123; var index = Math.round(random(0, arguments[0].length - 1)); return arguments[0][index] &#125; return random(0, arguments[0]) &#125; else if (arguments.length === 2) &#123; return Math.random() * (arguments[1] - arguments[0]) + arguments[0] &#125; return 0 &#125;; var screenInfo = function (e) &#123; var width = Math.max(0, _w.innerWidth || _d.clientWidth || _b.clientWidth || 0), height = Math.max(0, _w.innerHeight || _d.clientHeight || _b.clientHeight || 0), scrollx = Math.max(0, _w.pageXOffset || _d.scrollLeft || _b.scrollLeft || 0) - (_d.clientLeft || 0), scrolly = Math.max(0, _w.pageYOffset || _d.scrollTop || _b.scrollTop || 0) - (_d.clientTop || 0); return &#123; width: width, height: height, ratio: width / height, centerx: width / 2, centery: height / 2, scrollx: scrollx, scrolly: scrolly &#125; &#125;; var mouseInfo = function (e) &#123; var screen = screenInfo(e), mousex = e ? Math.max(0, e.pageX || e.clientX || 0) : 0, mousey = e ? Math.max(0, e.pageY || e.clientY || 0) : 0; return &#123; mousex: mousex, mousey: mousey, centerx: mousex - screen.width / 2, centery: mousey - screen.height / 2 &#125; &#125;; var Point = function (x, y) &#123; this.x = 0; this.y = 0; this.set(x, y) &#125;; Point.prototype = &#123; constructor: Point, set: function (x, y) &#123; this.x = x || 0; this.y = y || 0 &#125;, copy: function (point) &#123; this.x = point.x || 0; this.y = point.y || 0; return this &#125;, multiply: function (x, y) &#123; this.x *= x || 1; this.y *= y || 1; return this &#125;, divide: function (x, y) &#123; this.x /= x || 1; this.y /= y || 1; return this &#125;, add: function (x, y) &#123; this.x += x || 0; this.y += y || 0; return this &#125;, subtract: function (x, y) &#123; this.x -= x || 0; this.y -= y || 0; return this &#125;, clampX: function (min, max) &#123; this.x = Math.max(min, Math.min(this.x, max)); return this &#125;, clampY: function (min, max) &#123; this.y = Math.max(min, Math.min(this.y, max)); return this &#125;, flipX: function () &#123; this.x *= -1; return this &#125;, flipY: function () &#123; this.y *= -1; return this &#125; &#125;; var Factory = function (options) &#123; this._canvas = null; this._context = null; this._sto = null; this._width = 0; this._height = 0; this._scroll = 0; this._ribbons = []; this._options = &#123; colorSaturation: \"80%\", colorBrightness: \"60%\", colorAlpha: 0.65, colorCycleSpeed: 6, verticalPosition: \"center\", horizontalSpeed: 150, ribbonCount: 5, strokeSize: 5, parallaxAmount: -0.5, animateSections: true &#125;; this._onDraw = this._onDraw.bind(this); this._onResize = this._onResize.bind(this); this._onScroll = this._onScroll.bind(this); this.setOptions(options); this.init() &#125;; Factory.prototype = &#123; constructor: Factory, setOptions: function (options) &#123; if (typeof options === \"object\") &#123; for (var key in options) &#123; if (options.hasOwnProperty(key)) &#123; this._options[key] = options[key] &#125; &#125; &#125; &#125;, init: function () &#123; try &#123; this._canvas = document.createElement(\"canvas\"); this._canvas.style[\"display\"] = \"block\"; this._canvas.style[\"position\"] = \"fixed\"; this._canvas.style[\"margin\"] = \"0\"; this._canvas.style[\"padding\"] = \"0\"; this._canvas.style[\"border\"] = \"0\"; this._canvas.style[\"outline\"] = \"0\"; this._canvas.style[\"left\"] = \"0\"; this._canvas.style[\"top\"] = \"0\"; this._canvas.style[\"width\"] = \"100%\"; this._canvas.style[\"height\"] = \"100%\"; this._canvas.style[\"z-index\"] = \"-1\"; this._onResize(); this._context = this._canvas.getContext(\"2d\"); this._context.clearRect(0, 0, this._width, this._height); this._context.globalAlpha = this._options.colorAlpha; window.addEventListener(\"resize\", this._onResize); window.addEventListener(\"scroll\", this._onScroll); document.body.appendChild(this._canvas) &#125; catch (e) &#123; console.warn(\"Canvas Context Error: \" + e.toString()); return &#125; this._onDraw() &#125;, addRibbon: function () &#123; var dir = Math.round(random(1, 9)) &gt; 5 ? \"right\" : \"left\", stop = 1000, hide = 200, min = 0 - hide, max = this._width + hide, movex = 0, movey = 0, startx = dir === \"right\" ? min : max, starty = Math.round(random(0, this._height)); if (/^(top|min)$/i.test(this._options.verticalPosition)) &#123; starty = 0 + hide &#125; else if (/^(middle|center)$/i.test(this._options.verticalPosition)) &#123; starty = this._height / 2 &#125; else if (/^(bottom|max)$/i.test(this._options.verticalPosition)) &#123; starty = this._height - hide &#125; var ribbon = [], point1 = new Point(startx, starty), point2 = new Point(startx, starty), point3 = null, color = Math.round(random(0, 360)), delay = 0; while (true) &#123; if (stop &lt;= 0) break; stop--; movex = Math.round((Math.random() * 1 - 0.2) * this._options.horizontalSpeed); movey = Math.round((Math.random() * 1 - 0.5) * (this._height * 0.25)); point3 = new Point(); point3.copy(point2); if (dir === \"right\") &#123; point3.add(movex, movey); if (point2.x &gt;= max) break &#125; else if (dir === \"left\") &#123; point3.subtract(movex, movey); if (point2.x &lt;= min) break &#125; ribbon.push(&#123; point1: new Point(point1.x, point1.y), point2: new Point(point2.x, point2.y), point3: point3, color: color, delay: delay, dir: dir, alpha: 0, phase: 0 &#125;); point1.copy(point2); point2.copy(point3); delay += 4; color += this._options.colorCycleSpeed &#125; this._ribbons.push(ribbon) &#125;, _drawRibbonSection: function (section) &#123; if (section) &#123; if (section.phase &gt;= 1 &amp;&amp; section.alpha &lt;= 0) &#123; return true &#125; if (section.delay &lt;= 0) &#123; section.phase += 0.02; section.alpha = Math.sin(section.phase) * 1; section.alpha = section.alpha &lt;= 0 ? 0 : section.alpha; section.alpha = section.alpha &gt;= 1 ? 1 : section.alpha; if (this._options.animateSections) &#123; var mod = Math.sin(1 + section.phase * Math.PI / 2) * 0.1; if (section.dir === \"right\") &#123; section.point1.add(mod, 0); section.point2.add(mod, 0); section.point3.add(mod, 0) &#125; else &#123; section.point1.subtract(mod, 0); section.point2.subtract(mod, 0); section.point3.subtract(mod, 0) &#125; section.point1.add(0, mod); section.point2.add(0, mod); section.point3.add(0, mod) &#125; &#125; else &#123; section.delay -= 0.5 &#125; var s = this._options.colorSaturation, l = this._options.colorBrightness, c = \"hsla(\" + section.color + \", \" + s + \", \" + l + \", \" + section.alpha + \" )\"; this._context.save(); if (this._options.parallaxAmount !== 0) &#123; this._context.translate(0, this._scroll * this._options.parallaxAmount) &#125; this._context.beginPath(); this._context.moveTo(section.point1.x, section.point1.y); this._context.lineTo(section.point2.x, section.point2.y); this._context.lineTo(section.point3.x, section.point3.y); this._context.fillStyle = c; this._context.fill(); if (this._options.strokeSize &gt; 0) &#123; this._context.lineWidth = this._options.strokeSize; this._context.strokeStyle = c; this._context.lineCap = \"round\"; this._context.stroke() &#125; this._context.restore() &#125; return false &#125;, _onDraw: function () &#123; for (var i = 0, t = this._ribbons.length; i &lt; t; ++i) &#123; if (!this._ribbons[i]) &#123; this._ribbons.splice(i, 1) &#125; &#125; this._context.clearRect(0, 0, this._width, this._height); for (var a = 0; a &lt; this._ribbons.length; ++a) &#123; var ribbon = this._ribbons[a], numSections = ribbon.length, numDone = 0; for (var b = 0; b &lt; numSections; ++b) &#123; if (this._drawRibbonSection(ribbon[b])) &#123; numDone++ &#125; &#125; if (numDone &gt;= numSections) &#123; this._ribbons[a] = null &#125; &#125; if (this._ribbons.length &lt; this._options.ribbonCount) &#123; this.addRibbon() &#125; requestAnimationFrame(this._onDraw) &#125;, _onResize: function (e) &#123; var screen = screenInfo(e); this._width = screen.width; this._height = screen.height; if (this._canvas) &#123; this._canvas.width = this._width; this._canvas.height = this._height; if (this._context) &#123; this._context.globalAlpha = this._options.colorAlpha &#125; &#125; &#125;, _onScroll: function (e) &#123; var screen = screenInfo(e); this._scroll = screen.scrolly &#125; &#125;; return Factory&#125;);new Ribbons(&#123; colorSaturation: \"60%\", colorBrightness: \"50%\", colorAlpha: 0.5, colorCycleSpeed: 5, verticalPosition: \"random\", horizontalSpeed: 200, ribbonCount: 3, strokeSize: 0, parallaxAmount: -0.2, animateSections: true&#125;); 打开 \\yilia\\layout\\layout.ejs 文件，在 &lt;%- partial(&#39;_partial/viewer&#39;) %&gt; 后添加以下代码： 12345&lt;!-- 彩带2.自动飘动 --&gt;&lt;% if (theme.ribbon_flow)&#123; %&gt; &lt;!-- &lt;script src=\"https://g.joyinshare.com/hc/piao.js\" type=\"text/javascript\"&gt;&lt;/script&gt; --&gt; &lt;script type=\"text/javascript\" src=\"/js/ribbon_flow.js\"&gt;&lt;/script&gt;&lt;% &#125; %&gt; 打开 \\yilia\\_config.yml 文件，添加以下代码： 12# 彩带2.自动飘动ribbon_flow: true 增加彩带可见度12345678910111213/* 全局背景半透明，提高彩带可见区域 *//*#container &#123; background: rgba(234, 234, 234, .5);&#125;*//* 文章外部背景关闭 */.mid-col &#123; background: none;&#125;/* 内容背景半透明，提高彩带可见区域 */.left-col,.article &#123; background: rgba(255, 255, 255, .5);&#125; Firefox滚动条优化打开 customize_main.0cf68a.css 文件添加自定义的样式代码： 12345/* Firefox滚动条优化 */*, id, class &#123; scrollbar-width: thin; scrollbar-color: #999 #eee;&#125;","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]}]}